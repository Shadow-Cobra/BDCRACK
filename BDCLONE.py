# Folow github : https://github.com/Shadow-Cobra
#Compile By Md Amzad Hossain (Shadow Cobra)
#Don't copy my script
import base64
import marshal
exec marshal.loads(base64.b64decode(""))